# -*- coding: utf-8 -*-
"""Projet PFDA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9WV4dFngYSIsX-T8I1St5s5pRE9FAfZ
"""

import pandas as pd

BikeData = pd.read_csv("SeoulBikeData.csv",sep=",")
BikeData = BikeData.rename(columns={"Rented Bike Count" : "bikeCount","Functioning Day":"functioningDay","Solar Radiation" : "solarRadiation","Dew point temperature":"dpTemperature","Wind speed":"windSpeed"})

BikeData

"""Date : year-month-day

Rented Bike count - Count of bikes rented at each hour

Hour - Hour of he day

Temperature-Temperature in Celsius

Humidity - %

Windspeed - m/s

Visibility - 10m

Dew point temperature - Celsius

Solar radiation - MJ/m2

Rainfall - mm

Snowfall - cm

Seasons - Winter, Spring, Summer, Autumn

Holiday - Holiday/No holiday

Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)

# Etude des Variables

## Variable : Functional Day
"""

func_bike = BikeData.groupby("functioningDay").bikeCount.sum()
func_bike
BikeData["functioningDay"] = BikeData["functioningDay"].apply(lambda x : 0 if x=="No" else 1)

"""## Variable : Holiday

On groupe par jour pour effctuer l'étude sur les jours
"""

holiday_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
holiday_bike

"""Rajout de la variable Holiday"""

holiday_bike["Holiday"] = BikeData[BikeData.Hour==12].reset_index().Holiday
holiday_bike

"""Pourcentage de jour de vacances et jour hors vacances"""

holiday_bike[holiday_bike.Holiday=="Holiday"].Holiday.count()/holiday_bike.Date.count()

holiday_bike[holiday_bike.Holiday=="No Holiday"].Holiday.count()/holiday_bike.Date.count()

"""5% des jours sont des vacances"""

holiday_bike.groupby("Holiday").bikeCount.sum()/holiday_bike.bikeCount.sum()

"""6.2% des vélos sont loués pendants des vacances

Y a t-il plus de jours non Functional Day en vacances ?
"""

holiday_bike["functioningDay"] = BikeData[BikeData.Hour==12].reset_index().functioningDay
holiday_bike

holiday_bike[(holiday_bike.Holiday=="Holiday") & (holiday_bike.functioningDay=="No")].Date.count()/holiday_bike[(holiday_bike.Holiday=="Holiday")].Date.count()

holiday_bike[(holiday_bike.Holiday=="No Holiday") & (holiday_bike.functioningDay=="No")].Date.count()/holiday_bike[(holiday_bike.Holiday=="No Holiday")].Date.count()

BikeData["Holiday"] = BikeData["Holiday"].apply(lambda x : 0 if x=="No Holiday" else 1)

"""Les vacances et les non-vacances contiennent tous deux des jour functional et non functional, garder les variables distinctent est donc pertinent

## Variable : Seasons

On groupe une nouvelle fois par jours pour réaliser l'étude
"""

seasons_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
seasons_bike

"""Rajout de la variable Seasons"""

seasons_bike["Seasons"] = BikeData[BikeData.Hour==12].reset_index().Seasons
seasons_bike

"""Calcul du nombre de locations de vélo total au cours des différentes saisons"""

seasons_bike = BikeData.groupby("Seasons").bikeCount.sum()
seasons_bike

"""Affichage sous forme de graphique en bâton"""

import matplotlib.pyplot as plt

plt.bar(seasons_bike.index,seasons_bike.values)

"""Les saisons ont un impact significatif sur la location de vélo. Il est donc pertinent de garder cette variable"""

BikeData["Seasons"] = BikeData["Seasons"].apply(lambda x : 0 if x=="Winter" else x)
BikeData["Seasons"] = BikeData["Seasons"].apply(lambda x : 1 if x=="Spring" else x)
BikeData["Seasons"] = BikeData["Seasons"].apply(lambda x : 2 if x=="Summer" else x)
BikeData["Seasons"] = BikeData["Seasons"].apply(lambda x : 3 if x=="Autumn" else x)

"""## Variable : Snowfall"""

snowfall_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
snowfall_bike

"""Rajout de la variable Snowfall"""

snowfall_bike["Snowfall"] = BikeData[BikeData.Hour==12].reset_index().Snowfall
snowfall_bike

"""Affichage du nombre de location de vélo en fonction de la quantité de neige"""

snowfall_bikes = BikeData.groupby("Snowfall").bikeCount.sum()/snowfall_bike.bikeCount.sum()
snowfall_bikes = snowfall_bikes.reset_index()

plt.plot(snowfall_bikes.Snowfall, snowfall_bikes.bikeCount)

plt.plot(snowfall_bikes.Snowfall.tolist()[1:], snowfall_bikes.bikeCount.tolist()[1:])

"""Nous allons en plus créer la variable suivante : True si il y a de la neige et False s'il n'y a pas de neige"""

BikeData["Snowy"] = BikeData["Snowfall"].apply(lambda x : 1 if x!=0.0 else 0)

BikeData.groupby("Snowy").bikeCount.sum()

"""## Variable : Rainfall"""

rainfall_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
rainfall_bike = BikeData.groupby("Rainfall").bikeCount.sum()/rainfall_bike.bikeCount.sum()
rainfall_bike = rainfall_bike.reset_index()
rainfall_bike

plt.plot(rainfall_bike.Rainfall, rainfall_bike.bikeCount)

plt.plot(rainfall_bike.Rainfall.tolist()[1:], rainfall_bike.bikeCount.tolist()[1:])

"""Nous allons en plus créer la variable suivante : True si il y a de la pluis et False s'il n'y en a pas"""

BikeData["Rainy"] = BikeData["Rainfall"].apply(lambda x : 1 if x!=0.0 else 0)
BikeData.groupby("Rainy").bikeCount.sum()

"""## Variable : Solar Radiation"""

solar_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
solar_bike = BikeData.groupby("solarRadiation").bikeCount.sum()/solar_bike.bikeCount.sum()
solar_bike = solar_bike.reset_index()
solar_bike

plt.plot(solar_bike.solarRadiation, solar_bike.bikeCount)

plt.plot(solar_bike.solarRadiation.tolist()[1:], solar_bike.bikeCount.tolist()[1:])

"""Nous allons en plus créer la variable suivante : True si il y a du soleil et False s'il n'y en a pas"""

BikeData["Sunny"] = BikeData["solarRadiation"].apply(lambda x : 1 if x!=0.0 else 0)
BikeData.groupby("Sunny").bikeCount.sum()

"""## Variable : Dew point temperature

"""

dp_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
dp_bike = BikeData.groupby("dpTemperature").bikeCount.sum()/dp_bike.bikeCount.sum()
dp_bike = dp_bike.reset_index()
dp_bike

plt.plot(dp_bike.dpTemperature, dp_bike.bikeCount)

"""Pas de modifications à apporter sur cette variables

## Variable : Visibility
"""

vis_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
vis_bike = BikeData.groupby("Visibility").bikeCount.sum()/vis_bike.bikeCount.sum()
vis_bike = vis_bike.reset_index()
vis_bike

plt.plot(vis_bike.Visibility, vis_bike.bikeCount)

plt.plot(vis_bike.Visibility.tolist()[:-1], vis_bike.bikeCount.tolist()[:-1])

"""Nous allons en plus créer la variable suivante : True si la visibilité est maximum et False si non"""

BikeData["VisMax"] = BikeData["Visibility"].apply(lambda x : 1 if x!=2000 else 0)
BikeData.groupby("VisMax").bikeCount.sum()

"""## Variable : Wind Speed"""

ws_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
ws_bike = BikeData.groupby("windSpeed").bikeCount.sum()/ws_bike.bikeCount.sum()
ws_bike = ws_bike.reset_index()
ws_bike

plt.plot(ws_bike.windSpeed, ws_bike.bikeCount)

"""Pas de modifications à apporter sur cette variable

## Variable : Humidity
"""

hu_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
hu_bike = BikeData.groupby("Humidity").bikeCount.sum()/hu_bike.bikeCount.sum()
hu_bike = hu_bike.reset_index()
hu_bike

plt.plot(hu_bike.Humidity, hu_bike.bikeCount)

"""Pas de modifications à apporter sur cette variable

## Variable : Temperature
"""

tmp_bike = BikeData[["Date","bikeCount"]].groupby("Date").sum().reset_index()
tmp_bike = BikeData.groupby("Temperature").bikeCount.sum()/tmp_bike.bikeCount.sum()
tmp_bike = tmp_bike.reset_index()
tmp_bike

plt.plot(tmp_bike.Temperature, tmp_bike.bikeCount)

"""Pas de modifications à apporter sur cette variable

## Variable : Hour
"""

hr_bike = BikeData[["Hour","bikeCount"]].groupby("Hour").sum().reset_index()
hr_bike["bikeCount"] = hr_bike["bikeCount"] /BikeData.bikeCount.sum()
hr_bike = hr_bike.reset_index()
hr_bike

plt.bar(hr_bike.Hour,hr_bike.bikeCount)

"""## Variable : Date

From the date we extract the day of the week and the month
"""

BikeData["Month"] = BikeData["Date"].apply(lambda x : x[3:5])
BikeData.groupby("Month").bikeCount.sum()

#BikeData["Day"] = BikeData["Date"].apply(lambda x : pd.to_datetime(x, format="%d/%m/%Y").day_name() )
#BikeData.groupby("Day").bikeCount.sum()

"""## Conclusion étude des variables"""

BikeData

"""# ML"""

import numpy as np

columns = BikeData.columns
mask = np.ones(columns.shape, dtype=bool)
mask[0]=0
mask[1]=0

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(BikeData[columns[mask]], BikeData[columns[1]], test_size=0.33)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X_train)                 # Il ne faut fiter que sur les data d'entrainement
X_train = scaler.transform(X_train)
X_test  = scaler.transform(X_test)  # apply same transformation to test data

"""## Support Vector Machine"""

from sklearn import svm
svr = svm.SVR(kernel='linear')

from sklearn.model_selection import GridSearchCV
parameters = {  'gamma' : [0.01, 0.1, 0.5]           }
grid       = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
grid.fit(X_train, y_train)
print (grid.best_score_, grid.best_estimator_)

# parameters = {  'C'      : [0.5, 1, 1.5]             ,
#                 'gamma'  : [0.5, 0.1, 0.15]      }
# grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
# grid.fit(X_train, y_train)
# print (grid.best_score_, grid.best_estimator_)

# parameters = {  'C'      : [6, 8, 10]             ,
#                 'gamma'  : [0.01, 0.1, 0.15]      }
# grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
# grid.fit(X_train, y_train)
# print (grid.best_score_, grid.best_estimator_)

# parameters = {  'C'      : [10, 15, 20]             ,
#                 'gamma'  : [0.01, 0.1, 0.15]      }
# grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
# grid.fit(X_train, y_train)
# print (grid.best_score_, grid.best_estimator_)

# parameters = {  'C'      : [30, 50, 70]             ,
#                 'gamma'  : [0.01, 0.1, 0.15]      }
# grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
# grid.fit(X_train, y_train)
# print (grid.best_score_, grid.best_estimator_)

# parameters = {  'C'      : [70, 100, 130]             ,
#                 'gamma'  : [0.1, 0.15,0.2]      }
# grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
# grid.fit(X_train, y_train)
# print (grid.best_score_, grid.best_estimator_)

# parameters = {  'C'      : [300, 500, 700]             ,
#                 'gamma'  : [0.1, 0.15,0.2]      }
# grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
# grid.fit(X_train, y_train)
# print (grid.best_score_, grid.best_estimator_)

"""etc"""

#parameters = {  'C'      : [43500]             ,
#                'gamma'  : [0.1]      }
#grid = GridSearchCV(svm.SVR(), parameters, n_jobs=-1)
#grid.fit(X_train, y_train)
#print (grid.best_score_, grid.best_estimator_)

"""## ARDRegression"""

#from sklearn import linear_model
#clf = linear_model.ARDRegression()
#clf.fit(X_train,y_train)

#from sklearn.metrics import mean_squared_error
#mean_squared_error(y_test,clf.predict(X_test))

"""## RidgeCV"""

#from sklearn import linear_model
#clf = linear_model.RidgeCV()
#clf.fit(X_train,y_train)
#mean_squared_error(y_test,clf.predict(X_test))

model = svm.SVR(kernel='linear',C=43500,gamma=0.1)
model.fit(X_train, y_train)

from joblib import dump

dump(model, 'api.joblib')
